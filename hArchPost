#!/usr/bin/env bash

# ---------------------------------------------------------------
#hArchPost - Post install - Downloadeded after hArch finishes    |
# ---------------------------------------------------------------
# Author    : Binary-Brawler                                     |
# Github    : https://github.com/Binary-Brawler                  |
# Version   : 1.0.2                                              |
# ---------------------------------------------------------------


# Constants
GREEN='\033[0;32m'
RED='\033[0;31m'
WHITE='\033[0;37m'
YELLOW='\033[0;33m'
PURPLE='\033[0;35m'
RESET='\033[0m'
NEWLINE=$'\n'
GITHUB='https://raw.githubusercontent.com/Binary-Brawler/hArch'

# Logging
log_warning() { echo -e "[${YELLOW}WARNING${RESET}] $1"; }
log_error() { echo -e "[${RED}ERROR${RESET}] $1"; }
print_info() { echo -e "[${GREEN}INFO${RESET}] $1${NEWLINE}"; }
log_success() { echo -e "[SUCCESS] $1"; }

# Repeats turned into functions ;) 
sleep_and_clear() {
    sleep 3
    clear
}

# Are we enabling parallel downloads again...
function pDownload() {
    print_info "-------------------------------------------------------------------------------------------------"
    # Inside your arch-chroot script
    enable_parallel=$(cat /enable_parallel.txt)

    if [ "$enable_parallel" = "true" ]; then
        # Enable parallel downloads
        sed -i '/#ParallelDownloads/s/^#//g' /etc/pacman.conf
        print_info "Parallel Downloads Enabled."
    else
        print_info "Parallel Downloads Disabled."
    fi
}

# Basic Packages
installer() {
    print_info "-------------------------------------------------------------------------------------------------"
    print_info "What would you like your system name set too..."
    read -p "Enter Hostname: " hostname
    echo $hostname > /etc/hostname
    print_info "Installing some handy packages..." 
    print_info "-------------------------------------------------------------------------------------------------"
    pacman -S dkms linux-headers mlocate cmake neofetch firefox flameshot net-tools dnsutils dconf dconf-editor fish noto-fonts ttf-ubuntu-font-family ttf-dejavu ttf-freefont ttf-liberation ttf-droid ttf-roboto terminus-font rxvt-unicode ranger rofi dmenu --noconfirm >/dev/null 2>&1
    hwclock --systohc
}

# Setup Desktop Env
desktopEnv() {
    print_info "-------------------------------------------------------------------------------------------------"
    print_info "Setting up DE..."
    pacman -S  mate mate-extra lightdm lightdm-gtk-greeter xorg xorg-server xorg-apps xorg-xinit --noconfirm >/dev/null 2>&1
    systemctl enable lightdm >/dev/null 2>&1
    sleep 3
    curl -O $GITHUB/main/linux-vs-windows.jpg >/dev/null 2>&1
    mv /linux-vs-windows.jpg /usr/share/backgrounds/mate/desktop/linux-vs-windows.jpg
    curl -O $GITHUB/main/MateConfig >/dev/null 2>&1
    sleep 2
    dconf load /org/mate/ < MateConfig.txt
}

# Setup Developer Env
devSetup() {
    print_info "-------------------------------------------------------------------------------------------------"
    read -p "Can you code? [Y/n]: " coder
    if [[ $coder == 'y' || $coder == 'Y' ]]; then
        print_info "Setting up a coding env... This may take awhile"
        print_info "-------------------------------------------------------------------------------------------------"
        pacman -S jdk-openjdk python-pip rustup go nodejs npm python3 git code neovim gimp audacity wireshark-qt vlc btop virtualbox postman docker pycharm-community-edition intellij-idea-community-edition --noconfirm >/dev/null 2>&1 
        read -p "Can you code in Haskell? [y/N]: " haskellIsTheBest
        if [[ $haskellIsTheBest == 'y' || $haskellIsTheBest == 'Y' ]]; then
            userHome=$(ls /home)
            cd /home/$user && mkdir -p ~/AUR && cd ~/AUR && git clone https://aur.archlinux.org/ghcup-hs-bin.git
            sleep 2
            print_info "Setting up GHCUP!"
            print_info "-------------------------------------------------------------------------------------------------"
            cd ghcup-hs-bin && yes 'y' | makepkg -si >/dev/null 2>&1

        else
            log_warning "Give it a whirl..."
        fi
    else
        log_warning "Do you know where the term Script Kiddie comes from?"
        sleep_and_clear
    fi
}

# Nvidia function to handle nvidia driver installation... WIP
# vidDriver will handle for now...
handle_nvidia() {
    NVD='NVIDIA'
    card=$(lspci -vmm | grep VGA -A6)
    if [[ $card == *"$NVD"* ]]; then
        print_info "Nvidia graphics detected. Applying configuration..."
        # Add Nvidia-specific configurations here
        # This will replace vidDriver() NVD case
    fi
}

# Basic Video Driver setup
vidDriver() {
    print_info "-------------------------------------------------------------------------------------------------"
    print_info "Gathering Graphics info..."
    sleep 2
    str=$(lspci -vmm | grep VGA -A6)
    AMD='AMD'
    NVD='NVIDIA'
    case $str in
        *"$AMD"*)
            print_info "Installing AMD Drivers..."
            print_info "-------------------------------------------------------------------------------------------------"
            pacman -S xf86-video-ati xf86-video-amdgpu mesa --noconfirm --needed >/dev/null
            ;;
        *"$NVD"*)
            print_info "Installing NVIDIA Drivers..."
            print_info "-------------------------------------------------------------------------------------------------"
            pacman -S nvidia nvidia-settings nvidia-utils glxinfo nvtop --noconfirm --needed >/dev/null
            curl -O $GITHUB/main/nvidia.hook >/dev/null
            curl -O $GITHUB/main/20-nvidia.conf >/dev/null
            mv nvidia.hook /etc/pacman.d/hooks
            mv 20-nvidia.conf /etc/X11/xorg.conf.d/
            bash -c "echo blacklist nouveau > /etc/modprobe.d/blacklist-nvidia-nouveau.conf"
            # FIXME
            # Add changes to mkinitcpio.conf - WIP
            # If issues, try:
            # xrandr --setprovideroutputsource modesetting NVIDIA-0
            # xrandr --auto
            ;;
        *)
            print_info "Unable to determine Graphics info.. Installing default drivers"
            print_info "-------------------------------------------------------------------------------------------------"
            pacman -S xf86-video-fbdev --noconfirm
    esac
}

# Setup local/root user accounts
userInfo() {
    print_info "-------------------------------------------------------------------------------------------------"
    print_info "Setting Root password..."
    passwd
    print_info "-------------------------------------------------------------------------------------------------"
    read -p "Enter Username: " username
    print_info "Creating a new user: $username"
    useradd -mg users -G wheel,power,storage -s /usr/bin/fish $username
    echo '%wheel ALL=(ALL:ALL) ALL' >> /etc/sudoers.d/wheel_group
    chmod 440 /etc/sudoers.d/wheel_group
    print_info "Setting password for user: $username"
    passwd $username
}

# Bootloader - eventually will be automated
booter() {
    print_info "-------------------------------------------------------------------------------------------------"
    print_info "Setting Bootloader..."
    drives=$(lsblk -f)
    echo -e "$drives${NEWLINE}"
    echo -e "[${YELLOW}SYNTAX${RESET}] If BIOS, attach bootloader to disk: ex- /dev/sda"
    echo -e "[${YELLOW}SYNTAX${RESET}] If UEFI, attach bootloader to partition: ex- /dev/nvme0n1p1"
    print_info "-------------------------------------------------------------------------------------------------"
    read -p "Enter Drive to install Bootloader [Example: /dev/nvme0n1p1]: " drive
    if [[ -d "/sys/firmware/efi" ]]; then
        print_info "Installing UEFI Bootloader..."
        pacman -S efibootmgr grub dosfstools mtools os-prober --noconfirm >/dev/null
        grub-install --target=x86_64-efi --bootloader-id=HARCH_UEFI --efi-directory=/boot/EFI --recheck
        grub-mkconfig -o /boot/grub/grub.cfg
        mkinitcpio -p linux
    else
        print_info "Installing BIOS Bootloader..."
        pacman -S grub --noconfirm >/dev/null
        grub-install --target=i386-pc $drive --recheck
        grub-mkconfig -o /boot/grub/grub.cfg
        mkinitcpio -p linux
    fi
}

# Setup blackarch repo for tooling
blackArch() {
    print_info "-------------------------------------------------------------------------------------------------"
    print_info "Installing BlackArch Repo and setting everything up..."
    curl -O 'https://blackarch.org/strap.sh' >/dev/null 2>&1
    chmod +x strap.sh
    ./strap.sh >/dev/null
    sleep 3
    print_info "Installing Blackarch Keyring"
    pacman -Syu --noconfirm >/dev/null 2>&1
}

# Setup VIM 
vimSetup() {
    print_info "-------------------------------------------------------------------------------------------------"
    read -p "Do you want to add Bundle to VIM? [y/n]: " vim
    if [[ $vim == 'y' || $vim == 'Y' ]]; then
        print_info "Adding Bundle to VIM..."
        users=$(ls /home)
        curl -O $GITHUB/main/vimrc_bundle_conf >/dev/null
        mv vimrc_bundle_conf /home/$users/.vimrc
    else
        log_warning "Skipping..."
    fi
}

# Install 3gb worth of tools
hackTools() {
    print_info "-------------------------------------------------------------------------------------------------"
    read -p 'Do you want to add the Master Hacking Toolset? [y/N]: ' ht
    if [[ $ht == 'y' || $ht == 'Y' ]]; then
        print_info "Installing Master Hacking Toolset... Go grab a drink!"
        curl -O $GITHUB/main/Tools/Master >/dev/null
        pacman -S - < /Master --noconfirm
    else
        log_warning "Skipping..."
    fi
}

complete() {
    sleep_and_clear
    print_info "-------------------------------------------------------------------------------------------------"
    neofetch
    print_info "-------------------------------------------------------------------------------------------------"
    log_success "hArch has been successfully installed on your system"
    print_info "Hack the Universe $username"
    log_warning "A reboot should now take place"
    print_info "Run the following commands to reboot properly:"
    log_warning "1: exit"
    log_warning "2: umount -a"
    log_warning "3: reboot"
    exit
}

# oneFuncToRuleThemAll
oneFuncToRuleThemAll() {
    pDownload
    sleep_and_clear

    installer
    sleep_and_clear

    userInfo
    sleep_and_clear

    vidDriver
    sleep_and_clear

    booter
    sleep_and_clear

    blackArch
    sleep_and_clear

    hackTools
    sleep_and_clear

    vimSetup
    sleep_and_clear

    desktopEnv
    sleep_and_clear

    devSetup
    sleep_and_clear

    complete
}



oneFuncToRuleThemAll
